// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PromotionType {
    ILIMITADA
    LIMITE_QUARTO
}

enum CardType {
    CREDITO
    DEBITO
}

model Promotion {
  id Int @id @default(autoincrement())
  discount Int
  type PromotionType
  num_rooms Int?
  reservations PublishedReservation[]
  @@map("promotion")
}

model Reservation {
  id Int  @id @default(autoincrement())
  Nome String 
  savedReservationUsers UserReservation[] 
  @@map("reservation")
}

model User {
  id Int @id @default(autoincrement())
  savedReservation UserReservation[] 
  @@map("user")
}

model UserReservation {
  user User @relation(fields:[user_id],references:[id])
  reservation Reservation @relation(fields:[reservation_id],references:[id]) 
  user_id Int 
  reservation_id Int
  @@id([user_id, reservation_id])
}

model Hotelier {
   id           Int        @id @default(autoincrement())
   name         String
   email        String 
   password     String
   hotel        String 
   adress       String
   cnpj         String

   reservations PublishedReservation[]

   @@map("hotelier")
}

model PublishedReservation {
  id           Int        @id @default(autoincrement())
  name         String 
  rooms        Int
  people       Int
  wifi         Boolean
  breakfast    Boolean
  airConditioner Boolean
  parking      Boolean
  room_service Boolean
  price        Float
  new_price    Float
  promotion    Promotion? @relation(fields: [promotion_id], references: [id])
  promotion_id Int?
  hotelier     Hotelier? @relation(fields: [hotelier_id], references: [id])
  hotelier_id Int
  reservations Reserve[]
  @@map("publishedReservation")
}


model Client {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  phone String
  password String
  cpf String 
  birthDate String

  paymentMethods PaymentMethod[]
  reservations Reserve[]
}

model PaymentMethod{
  id Int @id @default(autoincrement())
  name String
  number String 
  cvv Int 
  expiryDate String
  type CardType
  clientId Int 

  Client Client @relation(fields: [clientId], references: [id])
  reservations Reserve[]
}

model Reserve{
  id Int @id @default(autoincrement())
  num_rooms Int 
  checkin String
  checkout String
  num_adults Int 
  num_children Int 
  paymentMethodName String 
  price Float
  publishedReservationId Int
  clientId Int 
  paymentMethodId Int 
  PublishedReservation PublishedReservation @relation(fields: [publishedReservationId], references: [id])
  Client Client @relation(fields: [clientId], references: [id])
  PaymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id])
}





